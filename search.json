[{"path":"https://cityriverspaces.github.io/visor/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to visor","title":"Contributing to visor","text":"outlines propose change visor. detailed discussion contributing tidyverse packages, please see development contributing guide code review principles.","code":""},{"path":"https://cityriverspaces.github.io/visor/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to visor","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://cityriverspaces.github.io/visor/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to visor","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed). See guide create great issue advice.","code":""},{"path":"https://cityriverspaces.github.io/visor/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to visor","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"CityRiverSpaces/visor\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://cityriverspaces.github.io/visor/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to visor","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://cityriverspaces.github.io/visor/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to visor","text":"Please note visor project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://cityriverspaces.github.io/visor/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"Apache License","title":"Apache License","text":"Version 2.0, January 2004 <http://www.apache.org/licenses/>","code":""},{"path":[]},{"path":"https://cityriverspaces.github.io/visor/LICENSE.html","id":"id_1-definitions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"1. Definitions","title":"Apache License","text":"“License” shall mean terms conditions use, reproduction, distribution defined Sections 1 9 document. “Licensor” shall mean copyright owner entity authorized copyright owner granting License. “Legal Entity” shall mean union acting entity entities control, controlled , common control entity. purposes definition, “control” means () power, direct indirect, cause direction management entity, whether contract otherwise, (ii) ownership fifty percent (50%) outstanding shares, (iii) beneficial ownership entity. “” (“”) shall mean individual Legal Entity exercising permissions granted License. “Source” form shall mean preferred form making modifications, including limited software source code, documentation source, configuration files. “Object” form shall mean form resulting mechanical transformation translation Source form, including limited compiled object code, generated documentation, conversions media types. “Work” shall mean work authorship, whether Source Object form, made available License, indicated copyright notice included attached work (example provided Appendix ). “Derivative Works” shall mean work, whether Source Object form, based (derived ) Work editorial revisions, annotations, elaborations, modifications represent, whole, original work authorship. purposes License, Derivative Works shall include works remain separable , merely link (bind name) interfaces , Work Derivative Works thereof. “Contribution” shall mean work authorship, including original version Work modifications additions Work Derivative Works thereof, intentionally submitted Licensor inclusion Work copyright owner individual Legal Entity authorized submit behalf copyright owner. purposes definition, “submitted” means form electronic, verbal, written communication sent Licensor representatives, including limited communication electronic mailing lists, source code control systems, issue tracking systems managed , behalf , Licensor purpose discussing improving Work, excluding communication conspicuously marked otherwise designated writing copyright owner “Contribution.” “Contributor” shall mean Licensor individual Legal Entity behalf Contribution received Licensor subsequently incorporated within Work.","code":""},{"path":"https://cityriverspaces.github.io/visor/LICENSE.html","id":"id_2-grant-of-copyright-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"2. Grant of Copyright License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable copyright license reproduce, prepare Derivative Works , publicly display, publicly perform, sublicense, distribute Work Derivative Works Source Object form.","code":""},{"path":"https://cityriverspaces.github.io/visor/LICENSE.html","id":"id_3-grant-of-patent-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"3. Grant of Patent License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable (except stated section) patent license make, made, use, offer sell, sell, import, otherwise transfer Work, license applies patent claims licensable Contributor necessarily infringed Contribution(s) alone combination Contribution(s) Work Contribution(s) submitted. institute patent litigation entity (including cross-claim counterclaim lawsuit) alleging Work Contribution incorporated within Work constitutes direct contributory patent infringement, patent licenses granted License Work shall terminate date litigation filed.","code":""},{"path":"https://cityriverspaces.github.io/visor/LICENSE.html","id":"id_4-redistribution","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"4. Redistribution","title":"Apache License","text":"may reproduce distribute copies Work Derivative Works thereof medium, without modifications, Source Object form, provided meet following conditions: () must give recipients Work Derivative Works copy License; (b) must cause modified files carry prominent notices stating changed files; (c) must retain, Source form Derivative Works distribute, copyright, patent, trademark, attribution notices Source form Work, excluding notices pertain part Derivative Works; (d) Work includes “NOTICE” text file part distribution, Derivative Works distribute must include readable copy attribution notices contained within NOTICE file, excluding notices pertain part Derivative Works, least one following places: within NOTICE text file distributed part Derivative Works; within Source form documentation, provided along Derivative Works; , within display generated Derivative Works, wherever third-party notices normally appear. contents NOTICE file informational purposes modify License. may add attribution notices within Derivative Works distribute, alongside addendum NOTICE text Work, provided additional attribution notices construed modifying License. may add copyright statement modifications may provide additional different license terms conditions use, reproduction, distribution modifications, Derivative Works whole, provided use, reproduction, distribution Work otherwise complies conditions stated License.","code":""},{"path":"https://cityriverspaces.github.io/visor/LICENSE.html","id":"id_5-submission-of-contributions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"5. Submission of Contributions","title":"Apache License","text":"Unless explicitly state otherwise, Contribution intentionally submitted inclusion Work Licensor shall terms conditions License, without additional terms conditions. Notwithstanding , nothing herein shall supersede modify terms separate license agreement may executed Licensor regarding Contributions.","code":""},{"path":"https://cityriverspaces.github.io/visor/LICENSE.html","id":"id_6-trademarks","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"6. Trademarks","title":"Apache License","text":"License grant permission use trade names, trademarks, service marks, product names Licensor, except required reasonable customary use describing origin Work reproducing content NOTICE file.","code":""},{"path":"https://cityriverspaces.github.io/visor/LICENSE.html","id":"id_7-disclaimer-of-warranty","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"7. Disclaimer of Warranty","title":"Apache License","text":"Unless required applicable law agreed writing, Licensor provides Work (Contributor provides Contributions) “” BASIS, WITHOUT WARRANTIES CONDITIONS KIND, either express implied, including, without limitation, warranties conditions TITLE, NON-INFRINGEMENT, MERCHANTABILITY, FITNESS PARTICULAR PURPOSE. solely responsible determining appropriateness using redistributing Work assume risks associated exercise permissions License.","code":""},{"path":"https://cityriverspaces.github.io/visor/LICENSE.html","id":"id_8-limitation-of-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"8. Limitation of Liability","title":"Apache License","text":"event legal theory, whether tort (including negligence), contract, otherwise, unless required applicable law (deliberate grossly negligent acts) agreed writing, shall Contributor liable damages, including direct, indirect, special, incidental, consequential damages character arising result License use inability use Work (including limited damages loss goodwill, work stoppage, computer failure malfunction, commercial damages losses), even Contributor advised possibility damages.","code":""},{"path":"https://cityriverspaces.github.io/visor/LICENSE.html","id":"id_9-accepting-warranty-or-additional-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"9. Accepting Warranty or Additional Liability","title":"Apache License","text":"redistributing Work Derivative Works thereof, may choose offer, charge fee , acceptance support, warranty, indemnity, liability obligations /rights consistent License. However, accepting obligations, may act behalf sole responsibility, behalf Contributor, agree indemnify, defend, hold Contributor harmless liability incurred , claims asserted , Contributor reason accepting warranty additional liability. END TERMS CONDITIONS","code":""},{"path":"https://cityriverspaces.github.io/visor/LICENSE.html","id":"appendix-how-to-apply-the-apache-license-to-your-work","dir":"","previous_headings":"","what":"APPENDIX: How to apply the Apache License to your work","title":"Apache License","text":"apply Apache License work, attach following boilerplate notice, fields enclosed brackets [] replaced identifying information. (Don’t include brackets!) text enclosed appropriate comment syntax file format. also recommend file class name description purpose included “printed page” copyright notice easier identification within third-party archives.","code":"Copyright [yyyy] [name of copyright owner]  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."},{"path":"https://cityriverspaces.github.io/visor/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Claudiu Forgaci. Author, maintainer, copyright holder. Francesco Nattino. Author. Netherlands eScience Center. Funder.","code":""},{"path":"https://cityriverspaces.github.io/visor/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Forgaci C, Nattino F (2025). visor: Geospatial Tools Visibility Analysis. R package version 0.1.0, https://cityriverspaces.github.io/visor/.","code":"@Manual{,   title = {visor: Geospatial Tools for Visibility Analysis},   author = {Claudiu Forgaci and Francesco Nattino},   year = {2025},   note = {R package version 0.1.0},   url = {https://cityriverspaces.github.io/visor/}, }"},{"path":"https://cityriverspaces.github.io/visor/index.html","id":"visor-","dir":"","previous_headings":"","what":"Geospatial Tools for Visibility Analysis","title":"Geospatial Tools for Visibility Analysis","text":"goal visor provide set tools visibility analysis.","code":""},{"path":"https://cityriverspaces.github.io/visor/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Geospatial Tools for Visibility Analysis","text":"can install released version visor CRAN : can install development version visor GitHub :","code":"install.packages(\"visor\") # install.packages(\"pak\") pak::pak(\"CityRiverSpaces/visor\")"},{"path":"https://cityriverspaces.github.io/visor/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Geospatial Tools for Visibility Analysis","text":"basic example shows use visor calculate isovist view points arbitrary geometry (line) set occluders:","code":"library(visor) library(sf)  # Define occluder geoemtries occluders <- st_sfc(   create_occluder(1, 1, 1, 0.5),   create_occluder(4, 1, 1.5, 0.7),   create_occluder(7, 1, 0.8, 0.8),   create_occluder(2, 5, 2, 1),   create_occluder(5, 5, 1, 1.5),   create_occluder(1, 7, 1.2, 0.6),   create_occluder(7, 7, 1.8, 0.9) )  # Define the viewpoint source geometry line <- st_sfc(   st_linestring(matrix(c(0, 3, 9, 3), ncol = 2, byrow = TRUE)) )  # Generate viewpoints vpoints <- get_viewpoints(line, density = 1)  # Calculate isovist isovist <- get_isovist(vpoints, occluders, ray_num = 160, ray_length = 5,                        remove_holes = FALSE)  plot(isovist, col = \"blue\") plot(occluders, col = \"grey\", add = TRUE) plot(line, col = \"lightblue\", add = TRUE) plot(vpoints, col = \"red\", add = TRUE)"},{"path":"https://cityriverspaces.github.io/visor/reference/create_occluder.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a polygon representing an occluder — create_occluder","title":"Create a polygon representing an occluder — create_occluder","text":"Create polygon representing occluder","code":""},{"path":"https://cityriverspaces.github.io/visor/reference/create_occluder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a polygon representing an occluder — create_occluder","text":"","code":"create_occluder(center_x, center_y, length, width)"},{"path":"https://cityriverspaces.github.io/visor/reference/create_occluder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a polygon representing an occluder — create_occluder","text":"center_x Center x coordinate center_y Center y coordinate length Length occluder width Width occluder","code":""},{"path":"https://cityriverspaces.github.io/visor/reference/create_occluder.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a polygon representing an occluder — create_occluder","text":"object class sfc_POLYGON","code":""},{"path":"https://cityriverspaces.github.io/visor/reference/create_occluder.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a polygon representing an occluder — create_occluder","text":"","code":"occluder <- create_occluder(0, 0, 10, 2)"},{"path":"https://cityriverspaces.github.io/visor/reference/get_isovist.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate isovist from one or multiple viewpoints — get_isovist","title":"Calculate isovist from one or multiple viewpoints — get_isovist","text":"Isovists estimated shooting set rays viewpoint, constructing envelope (partially occluded) rays.","code":""},{"path":"https://cityriverspaces.github.io/visor/reference/get_isovist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate isovist from one or multiple viewpoints — get_isovist","text":"","code":"get_isovist(   viewpoints,   occluders = NULL,   ray_num = 40,   ray_length = 100,   remove_holes = TRUE )"},{"path":"https://cityriverspaces.github.io/visor/reference/get_isovist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate isovist from one or multiple viewpoints — get_isovist","text":"viewpoints object class sf_POINT sfc_POINT occluders object class sf, sfc sfg ray_num number rays per viewpoint. number rays per quadrant needs whole number, ray_num rounded closest multiple four ray_length length rays remove_holes whether remove holes overall isovist geometry","code":""},{"path":"https://cityriverspaces.github.io/visor/reference/get_isovist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate isovist from one or multiple viewpoints — get_isovist","text":"object class sfc_POLYGON sfc_MULTIPOLYGON","code":""},{"path":"https://cityriverspaces.github.io/visor/reference/get_isovist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate isovist from one or multiple viewpoints — get_isovist","text":"","code":"# Define viewpoints and occluder geometries viewpoints <- sf::st_sfc(   sf::st_point(c(-1, 1)),   sf::st_point(c(0, 0)),   sf::st_point(c(1, -1)) ) occluder1 <- sf::st_polygon(list(sf::st_linestring(   cbind(c(-1, -1, -0.9, -0.9, -1),         c(-1, -0.9, -0.9, -1, -1)) ))) occluder2 <- sf::st_polygon(list(sf::st_linestring(   cbind(c(0.4, 0.4, 0.6, 0.6, 0.4),         c(0.5, 0.7, 0.7, 0.5, 0.5)) ))) occluders <- sf::st_sfc(occluder1, occluder2)  # Calculare isovist based on 40 rays (default) get_isovist(viewpoints, occluders, ray_length = 1.5) #> Geometry set for 1 feature  #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -2.5 ymin: -2.5 xmax: 2.5 ymax: 2.5 #> CRS:           NA #> POLYGON ((2.426585 -1.463525, 2.33651 -1.680986...  # Increase number of rays to get higher resolution get_isovist(viewpoints, occluders, ray_num = 400, ray_length = 1.5) #> Geometry set for 1 feature  #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -2.5 ymin: -2.5 xmax: 2.5 ymax: 2.5 #> CRS:           NA #> POLYGON ((2.49926 -1.047116, 2.498335 -1.07066,..."},{"path":"https://cityriverspaces.github.io/visor/reference/get_isovists.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct isovist from (partially occluded) rays — get_isovists","title":"Construct isovist from (partially occluded) rays — get_isovists","text":"Construct isovist (partially occluded) rays","code":""},{"path":"https://cityriverspaces.github.io/visor/reference/get_isovists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct isovist from (partially occluded) rays — get_isovists","text":"","code":"get_isovists(rays)"},{"path":"https://cityriverspaces.github.io/visor/reference/get_isovists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct isovist from (partially occluded) rays — get_isovists","text":"rays object class sf, including \"isovist_id\" attribute","code":""},{"path":"https://cityriverspaces.github.io/visor/reference/get_isovists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct isovist from (partially occluded) rays — get_isovists","text":"object class sfc_POLYGON","code":""},{"path":"https://cityriverspaces.github.io/visor/reference/get_rays.html","id":null,"dir":"Reference","previous_headings":"","what":"Get rays from the viewpoints within a maximum isovist — get_rays","title":"Get rays from the viewpoints within a maximum isovist — get_rays","text":"Get rays viewpoints within maximum isovist","code":""},{"path":"https://cityriverspaces.github.io/visor/reference/get_rays.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get rays from the viewpoints within a maximum isovist — get_rays","text":"","code":"get_rays(viewpoints, ray_num = 40, ray_length = 100)"},{"path":"https://cityriverspaces.github.io/visor/reference/get_rays.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get rays from the viewpoints within a maximum isovist — get_rays","text":"viewpoints object class sf_POINT sfc_POINT ray_num number rays. number rays per quadrant needs whole number, ray_num rounded closest multiple four ray_length length rays","code":""},{"path":"https://cityriverspaces.github.io/visor/reference/get_rays.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get rays from the viewpoints within a maximum isovist — get_rays","text":"object class sf_LINESTRING","code":""},{"path":"https://cityriverspaces.github.io/visor/reference/get_viewpoints.html","id":null,"dir":"Reference","previous_headings":"","what":"Get viewpoints from an arbitrary geometry — get_viewpoints","title":"Get viewpoints from an arbitrary geometry — get_viewpoints","text":"Generate discrete set points given geometry. geometry (MULTI)POLYGON, points generated boundary.","code":""},{"path":"https://cityriverspaces.github.io/visor/reference/get_viewpoints.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get viewpoints from an arbitrary geometry — get_viewpoints","text":"","code":"get_viewpoints(x, density = 1/50)"},{"path":"https://cityriverspaces.github.io/visor/reference/get_viewpoints.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get viewpoints from an arbitrary geometry — get_viewpoints","text":"x object class sf, sfc sfg density number points per distance unit","code":""},{"path":"https://cityriverspaces.github.io/visor/reference/get_viewpoints.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get viewpoints from an arbitrary geometry — get_viewpoints","text":"object class sfc_POINT","code":""},{"path":"https://cityriverspaces.github.io/visor/reference/get_viewpoints.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get viewpoints from an arbitrary geometry — get_viewpoints","text":"","code":"line <- sf::st_linestring(cbind(c(-1, 1), c(0, 0))) get_viewpoints(line, density = 5) #> Geometry set for 10 features  #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -0.9 ymin: 0 xmax: 0.9 ymax: 0 #> CRS:           NA #> First 5 geometries: #> POINT (-0.9 0) #> POINT (-0.7 0) #> POINT (-0.5 0) #> POINT (-0.3 0) #> POINT (-0.1 0)"},{"path":"https://cityriverspaces.github.io/visor/reference/merge_isovists.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge the viewpoint isovists — merge_isovists","title":"Merge the viewpoint isovists — merge_isovists","text":"Merge viewpoint isovists","code":""},{"path":"https://cityriverspaces.github.io/visor/reference/merge_isovists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge the viewpoint isovists — merge_isovists","text":"","code":"merge_isovists(isovists, remove_holes = TRUE)"},{"path":"https://cityriverspaces.github.io/visor/reference/merge_isovists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge the viewpoint isovists — merge_isovists","text":"isovists object class sf, sfc sfg remove_holes whether remove holes overall isovist geometry","code":""},{"path":"https://cityriverspaces.github.io/visor/reference/merge_isovists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge the viewpoint isovists — merge_isovists","text":"object class sfc_POLYGON sfc_MULTIPOLYGON","code":""},{"path":"https://cityriverspaces.github.io/visor/reference/occlude_rays.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine the non-occluded segments of the rays — occlude_rays","title":"Determine the non-occluded segments of the rays — occlude_rays","text":"Determine non-occluded segments rays","code":""},{"path":"https://cityriverspaces.github.io/visor/reference/occlude_rays.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine the non-occluded segments of the rays — occlude_rays","text":"","code":"occlude_rays(rays, occluders = NULL)"},{"path":"https://cityriverspaces.github.io/visor/reference/occlude_rays.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine the non-occluded segments of the rays — occlude_rays","text":"rays object class sf_LINESTRING occluders object class sf, sfc sfg","code":""},{"path":"https://cityriverspaces.github.io/visor/reference/occlude_rays.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine the non-occluded segments of the rays — occlude_rays","text":"object class sf_LINESTRING","code":""},{"path":"https://cityriverspaces.github.io/visor/news/index.html","id":"version-010---2025-04-03","dir":"Changelog","previous_headings":"","what":"Version 0.1.0 - 2025-04-03","title":"Version 0.1.0 - 2025-04-03","text":"CRAN release: 2025-04-07","code":""},{"path":"https://cityriverspaces.github.io/visor/news/index.html","id":"added-0-1-0","dir":"Changelog","previous_headings":"","what":"Added","title":"Version 0.1.0 - 2025-04-03","text":"first version package created","code":""}]
