[{"path":"https://cityriverspaces.github.io/visor/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to visor","title":"Contributing to visor","text":"outlines propose change visor. detailed discussion contributing tidyverse packages, please see development contributing guide code review principles.","code":""},{"path":"https://cityriverspaces.github.io/visor/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to visor","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://cityriverspaces.github.io/visor/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to visor","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed). See guide create great issue advice.","code":""},{"path":"https://cityriverspaces.github.io/visor/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to visor","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"CityRiverSpaces/visor\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://cityriverspaces.github.io/visor/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to visor","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://cityriverspaces.github.io/visor/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to visor","text":"Please note visor project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://cityriverspaces.github.io/visor/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Claudiu Forgaci. Author, maintainer, copyright holder. Francesco Nattino. Author. Netherlands eScience Center. Funder.","code":""},{"path":"https://cityriverspaces.github.io/visor/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Forgaci C, Nattino F (2025). visor: Geospatial Tools Visibility Analysis. R package version 0.1.0, https://github.com/CityRiverSpaces/visor, https://cityriverspaces.github.io/visor/.","code":"@Manual{,   title = {visor: Geospatial Tools for Visibility Analysis},   author = {Claudiu Forgaci and Francesco Nattino},   year = {2025},   note = {R package version 0.1.0, https://github.com/CityRiverSpaces/visor},   url = {https://cityriverspaces.github.io/visor/}, }"},{"path":"https://cityriverspaces.github.io/visor/index.html","id":"visor","dir":"","previous_headings":"","what":"Geospatial Tools for Visibility Analysis","title":"Geospatial Tools for Visibility Analysis","text":"goal visor provide set tools visibility analysis.","code":""},{"path":"https://cityriverspaces.github.io/visor/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Geospatial Tools for Visibility Analysis","text":"can install released version visor CRAN : can install development version visor GitHub :","code":"install.packages(\"visor\") # install.packages(\"pak\") pak::pak(\"CityRiverSpaces/visor\")"},{"path":"https://cityriverspaces.github.io/visor/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Geospatial Tools for Visibility Analysis","text":"basic example shows use visor calculate isovist view points arbitrary geometry (line) set occluders:","code":"library(visor) library(sf)  # Define occluder geoemtries occluders <- st_sfc(   create_occluder(1, 1, 1, 0.5),   create_occluder(4, 1, 1.5, 0.7),   create_occluder(7, 1, 0.8, 0.8),   create_occluder(2, 5, 2, 1),   create_occluder(5, 5, 1, 1.5),   create_occluder(1, 7, 1.2, 0.6),   create_occluder(7, 7, 1.8, 0.9) )  # Define the viewpoint source geometry line <- st_sfc(   st_linestring(matrix(c(0, 3, 9, 3), ncol = 2, byrow = TRUE)) )  # Generate viewpoints vpoints <- get_viewpoints(line, density = 1)  # Calculate isovist isovist <- get_isovist(vpoints, occluders, ray_num = 160, ray_length = 5,                        remove_holes = FALSE)  plot(isovist, col = \"blue\") plot(occluders, col = \"grey\", add = TRUE) plot(line, col = \"lightblue\", add = TRUE) plot(vpoints, col = \"red\", add = TRUE)"},{"path":"https://cityriverspaces.github.io/visor/reference/create_occluder.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a polygon representing an occluder — create_occluder","title":"Create a polygon representing an occluder — create_occluder","text":"Create polygon representing occluder","code":""},{"path":"https://cityriverspaces.github.io/visor/reference/create_occluder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a polygon representing an occluder — create_occluder","text":"","code":"create_occluder(center_x, center_y, length, width)"},{"path":"https://cityriverspaces.github.io/visor/reference/create_occluder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a polygon representing an occluder — create_occluder","text":"center_x Center x coordinate center_y Center y coordinate length Length occluder width Width occluder","code":""},{"path":"https://cityriverspaces.github.io/visor/reference/create_occluder.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a polygon representing an occluder — create_occluder","text":"object class sfc_POLYGON","code":""},{"path":"https://cityriverspaces.github.io/visor/reference/create_occluder.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a polygon representing an occluder — create_occluder","text":"","code":"occluder <- create_occluder(0, 0, 10, 2)"},{"path":"https://cityriverspaces.github.io/visor/reference/get_isovist.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate isovist from one or multiple viewpoints — get_isovist","title":"Calculate isovist from one or multiple viewpoints — get_isovist","text":"Isovists estimated shooting set rays viewpoint, constructing envelope (partially occluded) rays.","code":""},{"path":"https://cityriverspaces.github.io/visor/reference/get_isovist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate isovist from one or multiple viewpoints — get_isovist","text":"","code":"get_isovist(   viewpoints,   occluders = NULL,   ray_num = 40,   ray_length = 100,   remove_holes = TRUE )"},{"path":"https://cityriverspaces.github.io/visor/reference/get_isovist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate isovist from one or multiple viewpoints — get_isovist","text":"viewpoints object class sf_POINT sfc_POINT occluders object class sf, sfc sfg ray_num number rays per viewpoint. number rays per quadrant needs whole number, ray_num rounded closest multiple four ray_length length rays remove_holes whether remove holes overall isovist geometry","code":""},{"path":"https://cityriverspaces.github.io/visor/reference/get_isovist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate isovist from one or multiple viewpoints — get_isovist","text":"object class sfc_POLYGON sfc_MULTIPOLYGON","code":""},{"path":"https://cityriverspaces.github.io/visor/reference/get_isovist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate isovist from one or multiple viewpoints — get_isovist","text":"","code":"# Define viewpoints and occluder geometries viewpoints <- sf::st_sfc(   sf::st_point(c(-1, 1)),   sf::st_point(c(0, 0)),   sf::st_point(c(1, -1)) ) occluder1 <- sf::st_polygon(list(sf::st_linestring(   cbind(c(-1, -1, -0.9, -0.9, -1),         c(-1, -0.9, -0.9, -1, -1)) ))) occluder2 <- sf::st_polygon(list(sf::st_linestring(   cbind(c(0.4, 0.4, 0.6, 0.6, 0.4),         c(0.5, 0.7, 0.7, 0.5, 0.5)) ))) occluders <- sf::st_sfc(occluder1, occluder2)  # Calculare isovist based on 40 rays (default) get_isovist(viewpoints, occluders, ray_length = 1.5) #> Geometry set for 1 feature  #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -2.5 ymin: -2.5 xmax: 2.5 ymax: 2.5 #> CRS:           NA #> POLYGON ((2.426585 -1.463525, 2.33651 -1.680986...  # Increase number of rays to get higher resolution get_isovist(viewpoints, occluders, ray_num = 400, ray_length = 1.5) #> Geometry set for 1 feature  #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -2.5 ymin: -2.5 xmax: 2.5 ymax: 2.5 #> CRS:           NA #> POLYGON ((2.49926 -1.047116, 2.498335 -1.07066,..."},{"path":"https://cityriverspaces.github.io/visor/reference/get_isovists.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct isovist from (partially occluded) rays — get_isovists","title":"Construct isovist from (partially occluded) rays — get_isovists","text":"Construct isovist (partially occluded) rays","code":""},{"path":"https://cityriverspaces.github.io/visor/reference/get_isovists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct isovist from (partially occluded) rays — get_isovists","text":"","code":"get_isovists(rays)"},{"path":"https://cityriverspaces.github.io/visor/reference/get_isovists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct isovist from (partially occluded) rays — get_isovists","text":"rays object class sf, including \"isovist_id\" attribute","code":""},{"path":"https://cityriverspaces.github.io/visor/reference/get_isovists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct isovist from (partially occluded) rays — get_isovists","text":"object class sfc_POLYGON","code":""},{"path":"https://cityriverspaces.github.io/visor/reference/get_rays.html","id":null,"dir":"Reference","previous_headings":"","what":"Get rays from the viewpoints within a maximum isovist — get_rays","title":"Get rays from the viewpoints within a maximum isovist — get_rays","text":"Get rays viewpoints within maximum isovist","code":""},{"path":"https://cityriverspaces.github.io/visor/reference/get_rays.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get rays from the viewpoints within a maximum isovist — get_rays","text":"","code":"get_rays(viewpoints, ray_num = 40, ray_length = 100)"},{"path":"https://cityriverspaces.github.io/visor/reference/get_rays.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get rays from the viewpoints within a maximum isovist — get_rays","text":"viewpoints object class sf_POINT sfc_POINT ray_num number rays. number rays per quadrant needs whole number, ray_num rounded closest multiple four ray_length length rays","code":""},{"path":"https://cityriverspaces.github.io/visor/reference/get_rays.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get rays from the viewpoints within a maximum isovist — get_rays","text":"object class sf_LINESTRING","code":""},{"path":"https://cityriverspaces.github.io/visor/reference/get_viewpoints.html","id":null,"dir":"Reference","previous_headings":"","what":"Get viewpoints from an arbitrary geometry — get_viewpoints","title":"Get viewpoints from an arbitrary geometry — get_viewpoints","text":"Generate discrete set points given geometry. geometry (MULTI)POLYGON, points generated boundary.","code":""},{"path":"https://cityriverspaces.github.io/visor/reference/get_viewpoints.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get viewpoints from an arbitrary geometry — get_viewpoints","text":"","code":"get_viewpoints(x, density = 1/50)"},{"path":"https://cityriverspaces.github.io/visor/reference/get_viewpoints.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get viewpoints from an arbitrary geometry — get_viewpoints","text":"x object class sf, sfc sfg density number points per distance unit","code":""},{"path":"https://cityriverspaces.github.io/visor/reference/get_viewpoints.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get viewpoints from an arbitrary geometry — get_viewpoints","text":"object class sfc_POINT","code":""},{"path":"https://cityriverspaces.github.io/visor/reference/get_viewpoints.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get viewpoints from an arbitrary geometry — get_viewpoints","text":"","code":"line <- sf::st_linestring(cbind(c(-1, 1), c(0, 0))) get_viewpoints(line, density = 5) #> Geometry set for 10 features  #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -0.9 ymin: 0 xmax: 0.9 ymax: 0 #> CRS:           NA #> First 5 geometries: #> POINT (-0.9 0) #> POINT (-0.7 0) #> POINT (-0.5 0) #> POINT (-0.3 0) #> POINT (-0.1 0)"},{"path":"https://cityriverspaces.github.io/visor/reference/merge_isovists.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge the viewpoint isovists — merge_isovists","title":"Merge the viewpoint isovists — merge_isovists","text":"Merge viewpoint isovists","code":""},{"path":"https://cityriverspaces.github.io/visor/reference/merge_isovists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge the viewpoint isovists — merge_isovists","text":"","code":"merge_isovists(isovists, remove_holes = TRUE)"},{"path":"https://cityriverspaces.github.io/visor/reference/merge_isovists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge the viewpoint isovists — merge_isovists","text":"isovists object class sf, sfc sfg remove_holes whether remove holes overall isovist geometry","code":""},{"path":"https://cityriverspaces.github.io/visor/reference/merge_isovists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge the viewpoint isovists — merge_isovists","text":"object class sfc_POLYGON sfc_MULTIPOLYGON","code":""},{"path":"https://cityriverspaces.github.io/visor/reference/occlude_rays.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine the non-occluded segments of the rays — occlude_rays","title":"Determine the non-occluded segments of the rays — occlude_rays","text":"Determine non-occluded segments rays","code":""},{"path":"https://cityriverspaces.github.io/visor/reference/occlude_rays.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine the non-occluded segments of the rays — occlude_rays","text":"","code":"occlude_rays(rays, occluders = NULL)"},{"path":"https://cityriverspaces.github.io/visor/reference/occlude_rays.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine the non-occluded segments of the rays — occlude_rays","text":"rays object class sf_LINESTRING occluders object class sf, sfc sfg","code":""},{"path":"https://cityriverspaces.github.io/visor/reference/occlude_rays.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine the non-occluded segments of the rays — occlude_rays","text":"object class sf_LINESTRING","code":""},{"path":[]},{"path":"https://cityriverspaces.github.io/visor/news/index.html","id":"added-0-1-0","dir":"Changelog","previous_headings":"","what":"Added","title":"Version 0.1.0 - 2025-04-03","text":"first version package created","code":""}]
